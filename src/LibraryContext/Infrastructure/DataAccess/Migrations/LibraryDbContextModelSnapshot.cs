// <auto-generated />
using Inanna.LibraryContext.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inanna.LibraryContext.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenreModelMangaModel", b =>
                {
                    b.Property<string>("GenresName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MangasId")
                        .HasColumnType("int");

                    b.HasKey("GenresName", "MangasId");

                    b.HasIndex("MangasId");

                    b.ToTable("GenreModelMangaModel");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.ChapterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.GenreModel", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.MangaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.VolumeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("GenreModelMangaModel", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.GenreModel", null)
                        .WithMany()
                        .HasForeignKey("GenresName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.MangaModel", null)
                        .WithMany()
                        .HasForeignKey("MangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.ChapterModel", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.VolumeModel", "Volume")
                        .WithMany("Chapters")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Inanna.LibraryContext.Infrastructure.DataAccess.Models.PageModel", "Pages", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ChapterId")
                                .HasColumnType("int");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("ChapterId");

                            b1.ToTable("PageModel");

                            b1.WithOwner("Chapter")
                                .HasForeignKey("ChapterId");

                            b1.OwnsOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.ImageModel", "Image", b2 =>
                                {
                                    b2.Property<int>("PageModelId")
                                        .HasColumnType("int");

                                    b2.Property<string>("ContentType")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Path")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PageModelId");

                                    b2.ToTable("PageModel");

                                    b2.WithOwner()
                                        .HasForeignKey("PageModelId");
                                });

                            b1.Navigation("Chapter");

                            b1.Navigation("Image")
                                .IsRequired();
                        });

                    b.Navigation("Pages");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.MangaModel", b =>
                {
                    b.OwnsOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.ImageModel", "Cover", b1 =>
                        {
                            b1.Property<int>("MangaModelId")
                                .HasColumnType("int");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MangaModelId");

                            b1.ToTable("Mangas");

                            b1.WithOwner()
                                .HasForeignKey("MangaModelId");
                        });

                    b.Navigation("Cover")
                        .IsRequired();
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.VolumeModel", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Infrastructure.DataAccess.Models.MangaModel", "Manga")
                        .WithMany("Volumes")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.MangaModel", b =>
                {
                    b.Navigation("Volumes");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Infrastructure.DataAccess.Models.VolumeModel", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
