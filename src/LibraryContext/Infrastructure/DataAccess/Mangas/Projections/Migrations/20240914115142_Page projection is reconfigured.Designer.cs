// <auto-generated />
using System;
using Inanna.LibraryContext.Infrastructure.DataAccess.Mangas.Projections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inanna.LibraryContext.Infrastructure.DataAccess.Mangas.Projections.Migrations
{
    [DbContext(typeof(MangasProjectionsDbContext))]
    [Migration("20240914115142_Page projection is reconfigured")]
    partial class Pageprojectionisreconfigured
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.ChapterProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("VolumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.GenreProjection", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.GenreToMangaProjection", b =>
                {
                    b.Property<Guid>("MangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MangaId", "GenreName");

                    b.HasIndex("GenreName");

                    b.ToTable("GenresToMangas");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.MangaProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.PageProjection", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Number", "ChapterId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.VolumeProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.ChapterProjection", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.VolumeProjection", null)
                        .WithMany()
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.GenreToMangaProjection", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.GenreProjection", null)
                        .WithMany()
                        .HasForeignKey("GenreName")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.MangaProjection", null)
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.MangaProjection", b =>
                {
                    b.OwnsOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.ImageProjection", "Cover", b1 =>
                        {
                            b1.Property<Guid>("MangaProjectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MangaProjectionId");

                            b1.ToTable("Mangas");

                            b1.WithOwner()
                                .HasForeignKey("MangaProjectionId");
                        });

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.PageProjection", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.ChapterProjection", null)
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.ImageProjection", "Image", b1 =>
                        {
                            b1.Property<int>("PageProjectionNumber")
                                .HasColumnType("int");

                            b1.Property<Guid>("PageProjectionChapterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PageProjectionNumber", "PageProjectionChapterId");

                            b1.ToTable("Pages");

                            b1.WithOwner()
                                .HasForeignKey("PageProjectionNumber", "PageProjectionChapterId");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("Inanna.LibraryContext.Application.Features.Mangas.Projections.VolumeProjection", b =>
                {
                    b.HasOne("Inanna.LibraryContext.Application.Features.Mangas.Projections.MangaProjection", null)
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
